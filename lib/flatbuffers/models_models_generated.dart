// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

library models;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

class Actor {
  Actor._(this._bc, this._bcOffset);
  factory Actor(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Actor> reader = const _ActorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  int get dateOfBirth =>
      const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String get birthCity =>
      const fb.StringReader().vTableGet(_bc, _bcOffset, 8, null);

  @override
  String toString() {
    return 'Actor{name: $name, dateOfBirth: $dateOfBirth, birthCity: $birthCity}';
  }
}

class _ActorReader extends fb.TableReader<Actor> {
  const _ActorReader();

  @override
  Actor createObject(fb.BufferContext bc, int offset) =>
      new Actor._(bc, offset);
}

class ActorBuilder {
  ActorBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addDateOfBirth(int dateOfBirth) {
    fbBuilder.addUint64(1, dateOfBirth);
    return fbBuilder.offset;
  }

  int addBirthCityOffset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ActorObjectBuilder extends fb.ObjectBuilder {
  final String _name;
  final int _dateOfBirth;
  final String _birthCity;

  ActorObjectBuilder({
    String name,
    int dateOfBirth,
    String birthCity,
  })  : _name = name,
        _dateOfBirth = dateOfBirth,
        _birthCity = birthCity;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int nameOffset = fbBuilder.writeString(_name);
    final int birthCityOffset = fbBuilder.writeString(_birthCity);

    fbBuilder.startTable();
    if (nameOffset != null) {
      fbBuilder.addOffset(0, nameOffset);
    }
    fbBuilder.addUint64(1, _dateOfBirth);
    if (birthCityOffset != null) {
      fbBuilder.addOffset(2, birthCityOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}

class Character {
  Character._(this._bc, this._bcOffset);
  factory Character(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Character> reader = const _CharacterReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);
  String get house =>
      const fb.StringReader().vTableGet(_bc, _bcOffset, 6, null);
  Actor get playedBy => Actor.reader.vTableGet(_bc, _bcOffset, 8, null);
  int get age => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  String get firstSeen =>
      const fb.StringReader().vTableGet(_bc, _bcOffset, 12, null);

  @override
  String toString() {
    return 'Character{name: $name, house: $house, playedBy: $playedBy, age: $age, firstSeen: $firstSeen}';
  }
}

class _CharacterReader extends fb.TableReader<Character> {
  const _CharacterReader();

  @override
  Character createObject(fb.BufferContext bc, int offset) =>
      new Character._(bc, offset);
}

class CharacterBuilder {
  CharacterBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addHouseOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addPlayedByOffset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addAge(int age) {
    fbBuilder.addInt32(3, age);
    return fbBuilder.offset;
  }

  int addFirstSeenOffset(int offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CharacterObjectBuilder extends fb.ObjectBuilder {
  final String _name;
  final String _house;
  final ActorObjectBuilder _playedBy;
  final int _age;
  final String _firstSeen;

  CharacterObjectBuilder({
    String name,
    String house,
    ActorObjectBuilder playedBy,
    int age,
    String firstSeen,
  })  : _name = name,
        _house = house,
        _playedBy = playedBy,
        _age = age,
        _firstSeen = firstSeen;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int nameOffset = fbBuilder.writeString(_name);
    final int houseOffset = fbBuilder.writeString(_house);
    final int playedByOffset = _playedBy?.getOrCreateOffset(fbBuilder);
    final int firstSeenOffset = fbBuilder.writeString(_firstSeen);

    fbBuilder.startTable();
    if (nameOffset != null) {
      fbBuilder.addOffset(0, nameOffset);
    }
    if (houseOffset != null) {
      fbBuilder.addOffset(1, houseOffset);
    }
    if (playedByOffset != null) {
      fbBuilder.addOffset(2, playedByOffset);
    }
    fbBuilder.addInt32(3, _age);
    if (firstSeenOffset != null) {
      fbBuilder.addOffset(4, firstSeenOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder(initialSize: 1024);
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
